name: Rust

on: [push, pull_request]

env:
  APP_USER: app
  APP_USER_PASSWORD: secret
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.2
  SQLX_FEATURES: "rustls,postgres"

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce code format
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create an application user in Postgres
        run: |
          sudo apt install postgresql-client

          # Create the application user.
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PASSWORD}';"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${CREATE_QUERY}"

          # Grant create DB privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${GRANT_QUERY}"
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
        working-directory: ./app
      - name: Lint
        run: cargo clippy -- --deny warnings
        working-directory: ./app

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create an application user in Postgres
        run: |
          sudo apt install postgresql-client

          # Create the application user.
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PASSWORD}';"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${CREATE_QUERY}"

          # Grant create DB privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${GRANT_QUERY}"
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
        working-directory: ./app
      - name: Run tests
        run: cargo test --all-features
        working-directory: ./app
      # - name: Check that queries are fresh
      #   run: cargo sqlx prepare --workspace --check -- --all-targets
      #   working-directory: ./app

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create an application user in Postgres
        run: |
          sudo apt install postgresql-client

          # Create the application user.
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PASSWORD}';"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${CREATE_QUERY}"

          # Grant create DB privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql --username "postgres" --host "localhost" --command "${GRANT_QUERY}"
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
        working-directory: ./app
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        working-directory: ./app
      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage
        working-directory: ./app
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage
